{"version":3,"sources":["fileUploader.js"],"names":["filesList","classDragOver","fileInputMulti","document","querySelector","multiSelectorUniqPreview","getIndexOfFileList","name","list","reduce","position","file","index","async","encodeFileToText","text","then","getUniqFiles","newFiles","currentListFiles","Promise","resolve","all","map","inputFile","inputFilesText","savedFile","savedFilesText","newFileList","forEach","inputFileText","includes","concat","renderPreviews","currentFileList","target","textContent","myLi","createElement","setAttribute","dataset","key","addEventListener","eventDrop","eventDragOver","myButtonRemove","deleteArrayElementByIndex","files","arrayFilesToFileList","appendChild","filter","item","itemIndex","dataTransfer","items","add","DataTransfer","arraySwapIndex","firstIndex","secondIndex","tempList","slice","tmpFirstPos","myDragElement","event","preventDefault","querySelectorAll","classList","remove","myDropElement","newFilesList","Array","from","allowedTypes","validFiles","type","length","alert","value"],"mappings":"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","file":"bundle.js","sourcesContent":["/*\r\n                        * Variables\r\n                        */\r\n                        \r\nlet filesList = [];\r\nconst classDragOver = \"drag-over\";\r\nconst fileInputMulti = document.querySelector(\"#multi-selector-uniq #foto\");\r\n// DEMO Preview\r\nconst multiSelectorUniqPreview = document.querySelector(\"#multi-selector-uniq #preview\");\r\n\r\n/*\r\n* Functions\r\n*/\r\n\r\n/**\r\n * Returns the index of an Array of Files from its name. If there are multiple files with the same name, the last one will be returned.\r\n * @param {string} name - Name file.\r\n * @param {Array<File>} list - List of files.\r\n * @return number\r\n */\r\nfunction getIndexOfFileList(name, list) {\r\n    return list.reduce(\r\n        (position, file, index) => (file.name === name ? index : position),\r\n        -1\r\n    );\r\n}\r\n\r\n/**\r\n * Returns a File in text.\r\n * @param {File} file\r\n * @return {Promise<string>}\r\n */\r\nasync function encodeFileToText(file) {\r\n    return file.text().then((text) => {\r\n        return text;\r\n    });\r\n}\r\n\r\n/**\r\n * Returns an Array from the union of 2 Arrays of Files avoiding repetitions.\r\n * @param {Array<File>} newFiles\r\n * @param {Array<File>} currentListFiles\r\n * @return Promise<File[]>\r\n */\r\nasync function getUniqFiles(newFiles, currentListFiles) {\r\n    return new Promise((resolve) => {\r\n        Promise.all(newFiles.map((inputFile) => encodeFileToText(inputFile))).then(\r\n            (inputFilesText) => {\r\n                // Check all the files to save\r\n                Promise.all(\r\n                    currentListFiles.map((savedFile) => encodeFileToText(savedFile))\r\n                ).then((savedFilesText) => {\r\n                    let newFileList = currentListFiles;\r\n                    inputFilesText.forEach((inputFileText, index) => {\r\n                        if (!savedFilesText.includes(inputFileText)) {\r\n                            newFileList = newFileList.concat(newFiles[index]);\r\n                        }\r\n                    });\r\n                    resolve(newFileList);\r\n                });\r\n            }\r\n        );\r\n    });\r\n}\r\n\r\n/**\r\n * Only DEMO. Render preview.\r\n * @param currentFileList\r\n * @Only .EMO> param target.\r\n * @\r\n */\r\nfunction renderPreviews(currentFileList, target, inputFile) {\r\n    //\r\n    target.textContent = \"\";\r\n    currentFileList.forEach((file, index) => {\r\n        const myLi = document.createElement(\"li\");\r\n        myLi.textContent = file.name;\r\n        myLi.setAttribute(\"draggable\", 'true');\r\n        myLi.dataset.key = file.name;\r\n        myLi.addEventListener(\"drop\", eventDrop);\r\n        myLi.addEventListener(\"dragover\", eventDragOver);\r\n        const myButtonRemove = document.createElement(\"button\");\r\n        myButtonRemove.textContent = \"X\";\r\n        myButtonRemove.addEventListener(\"click\", () => {\r\n            filesList = deleteArrayElementByIndex(currentFileList, index);\r\n            inputFile.files = arrayFilesToFileList(filesList);\r\n            return renderPreviews(filesList, multiSelectorUniqPreview, inputFile);\r\n        });\r\n        myLi.appendChild(myButtonRemove);\r\n        target.appendChild(myLi);\r\n    });\r\n}\r\n\r\n/**\r\n * Returns a copy of the array by removing one position by index.\r\n * @param {Array<any>} list\r\n * @param {number} index\r\n * @return {Array<any>} list\r\n */\r\nfunction deleteArrayElementByIndex(list, index) {\r\n    return list.filter((item, itemIndex) => itemIndex !== index);\r\n}\r\n\r\n/**\r\n * Returns a FileLists from an array containing Files.\r\n * @param {Array<File>} filesList\r\n * @return {FileList}\r\n */\r\nfunction arrayFilesToFileList(filesList) {\r\n    return filesList.reduce(function (dataTransfer, file) {\r\n        dataTransfer.items.add(file);\r\n        return dataTransfer;\r\n    }, new DataTransfer()).files;\r\n}\r\n\r\n\r\n/**\r\n * Returns a copy of the Array by swapping 2 indices.\r\n * @param {number} firstIndex\r\n * @param {number} secondIndex\r\n * @param {Array<any>} list\r\n */\r\nfunction arraySwapIndex(firstIndex, secondIndex, list) {\r\n    const tempList = list.slice();\r\n    const tmpFirstPos = tempList[firstIndex];\r\n    tempList[firstIndex] = tempList[secondIndex];\r\n    tempList[secondIndex] = tmpFirstPos;\r\n    return tempList;\r\n}\r\n\r\n/*\r\n* Events\r\n*/\r\n\r\n// Input file\r\nfileInputMulti.addEventListener(\"input\", async () => {\r\n    // Get files list from <input>\r\n    const newFilesList = Array.from(fileInputMulti.files);\r\n    // Update list files\r\n    filesList = await getUniqFiles(newFilesList, filesList);\r\n    // Only DEMO. Redraw\r\n    renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);\r\n    // Set data to input\r\n    fileInputMulti.files = arrayFilesToFileList(filesList);\r\n});\r\n\r\n// Drag and drop\r\n\r\n// Drag Start - Moving element.\r\nlet myDragElement = undefined;\r\ndocument.addEventListener(\"dragstart\", (event) => {\r\n    // Saves which element is moving.\r\n    myDragElement = event.target;\r\n});\r\n\r\n// Drag over - Element that is below the element that is moving.\r\nfunction eventDragOver(event) {\r\n    // Remove from all elements the class that will show that it is a drop zone.\r\n    event.preventDefault();\r\n    multiSelectorUniqPreview\r\n        .querySelectorAll(\"li\")\r\n        .forEach((item) => item.classList.remove(classDragOver));\r\n\r\n    // On the element above it, the class is added to show that it is a drop zone.\r\n    event.target.classList.add(classDragOver);\r\n}\r\n\r\n// Drop - Element on which it is dropped.\r\nfunction eventDrop(event) {\r\n    // The element that is underneath the element that is moving when it is released is captured.\r\n    const myDropElement = event.target;\r\n    // The positions of the elements in the array are swapped. The dataset key is used as an index.\r\n    filesList = arraySwapIndex(\r\n        getIndexOfFileList(myDragElement.dataset.key, filesList),\r\n        getIndexOfFileList(myDropElement.dataset.key, filesList),\r\n        filesList\r\n    );\r\n    // The content of the input file is updated.\r\n    fileInputMulti.files = arrayFilesToFileList(filesList);\r\n    // Only DEMO. Changes are redrawn.\r\n    renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);\r\n}\r\n\r\nfileInputMulti.addEventListener(\"input\", async () => {\r\n    const newFilesList = Array.from(fileInputMulti.files);\r\n    const allowedTypes = ['image/jpg', 'image/jpeg', 'image/png', 'image/webp'];\r\n\r\n    // Filtra archivos no v√°lidos\r\n    const validFiles = newFilesList.filter(file => allowedTypes.includes(file.type));\r\n    const invalidFiles = newFilesList.filter(file => !allowedTypes.includes(file.type));\r\n\r\n    if (invalidFiles.length > 0) {\r\n        alert('Por favor, selecciona solo archivos de imagen (JPG, JPEG, PNG, WEBP).');\r\n    }\r\n\r\n    // Solo actualiza la lista de archivos si hay archivos v√°lidos\r\n    if (validFiles.length > 0) {\r\n        // Actualiza la lista de archivos v√°lidos\r\n        filesList = await getUniqFiles(validFiles, filesList);\r\n        renderPreviews(filesList, multiSelectorUniqPreview, fileInputMulti);\r\n        fileInputMulti.files = arrayFilesToFileList(filesList); // Actualiza el input con archivos v√°lidos\r\n    } else {\r\n        // Si no hay archivos v√°lidos, limpia el input\r\n        fileInputMulti.value = ''; // Limpia el input\r\n    }\r\n});\r\n\r\n"]}