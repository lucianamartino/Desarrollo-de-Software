<%- include('partials/_header.ejs'); %>

<div class="chat-container">
    <div class="chat-sidebar">
        <h2>Mensajes</h2>
        <ul id="chat-list">
            <% chats.forEach(chat => { %>
                <li class="chat-user">
                    <a href="/chat/<%= chat.idUsuario %>">
                        <%= chat.nombreUsuario %>
                    </a>
                </li>
            <% }) %>
        </ul>
    </div>
    <%if( receptor.nombreUsuario ) { %>
        <div class="chat-main">
            <div class="chat-header">
                <a href="/perfiles/<%= receptor.idUsuario %>">
                    <%= receptor.nombreUsuario %>
                </a>
                <!-- <h3><%= receptor.nombreUsuario %></h3> -->
            </div>
            <div id="messages" class="messages"></div>
            <div class="input-container">
                <input type="text" id="message-input" placeholder="Escribe tu mensaje...">
                <button id="send-button">Enviar</button>
            </div>
        </div>
    <% } %>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const currentUser = {
        userId: '<%= currentUser.id %>',
        name: '<%= currentUser.name %>'
    };
    
    // Establecer el receptor directamente del parámetro de la URL
    const selectedReceptor = '<%= receptor.idUsuario %>';

    document.addEventListener('DOMContentLoaded', () => {
        // Event listener para el botón de enviar
        document.getElementById('send-button').addEventListener('click', () => {
            sendMessage();
        });

        // Event listener para la tecla Enter
        document.getElementById('message-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Autenticar al conectar
        socket.emit('authenticate', { userId: currentUser.userId });
    });

    socket.on('authenticated', () => {
        console.log('Conectado al chat');
        loadMessages();
    });

    // Cargar mensajes solo del chat actual
    async function loadMessages() {
        try {
            const response = await fetch(`/chat/messages?receptorId=${selectedReceptor}`);
            const messages = await response.json();
            clearMessages();
            displayMessages(messages);
        } catch (error) {
            console.error('Error al cargar mensajes:', error);
        }
    }

    function clearMessages() {
        const messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML = '';
    }

    // function displayMessages(messages) {
    //     const messagesDiv = document.getElementById('messages');
    //     messages.forEach(msg => {
    //         const messageElement = createMessageElement(msg);
    //         messagesDiv.appendChild(messageElement);
    //     });
    //     scrollToBottom();
    // }

    function displayMessages(messages) {
        const messagesDiv = document.getElementById('messages');
        messages.forEach(msg => {
            const messageElement = createMessageElement(msg);
            messagesDiv.appendChild(messageElement);
        });
        scrollToBottom();  // Asegurarse de que se desplaza hacia abajo después de agregar los mensajes
    }

    function createMessageElement(msg) {
        const div = document.createElement('div');
        const isSent = msg.Usuario_idUsuario == currentUser.userId;
        div.className = `message ${isSent ? 'sent' : 'received'}`;
        
        const text = document.createElement('p');
        text.textContent = msg.texto;
        
        const info = document.createElement('small');
        // const fecha = new Date(msg.fecha);
        // info.textContent = `${fecha.toLocaleTimeString()}`;
        
        div.appendChild(text);
        div.appendChild(info);
        return div;
    }

    function scrollToBottom() {
        const messagesDiv = document.getElementById('messages');
        messagesDiv.scrollTop = messagesDiv.scrollHeight;  // Desplazar hacia el final
    }

    function sendMessage() {
        const input = document.getElementById('message-input');
        const mensaje = input.value.trim();
        
        if (mensaje) {
            console.log('Enviando mensaje:', {
                receptorId: selectedReceptor,
                texto: mensaje,
                emisorNombre: currentUser.name
            });
            
            socket.emit('send_message', {
                receptorId: selectedReceptor,
                texto: mensaje,
                emisorNombre: currentUser.name
            });
            input.value = '';
        }
    }

    // Recibir nuevos mensajes
    socket.on('new_message', (message) => {
        // Solo mostrar mensajes si son parte de esta conversación
        if (message.Usuario_idUsuario == selectedReceptor || 
            message.Receptor_idUsuario == selectedReceptor) {
            const messagesDiv = document.getElementById('messages');
            const messageElement = createMessageElement(message);
            messagesDiv.appendChild(messageElement);
            scrollToBottom();
        }
    });

    // Manejar mensajes enviados
    socket.on('message_sent', (message) => {
        const messagesDiv = document.getElementById('messages');
        const messageElement = createMessageElement(message);
        messagesDiv.appendChild(messageElement);
        scrollToBottom();
    });

    socket.on('error', (error) => {
        console.error('Error:', error);
        alert('Error al enviar mensaje');
    });
</script>

<%- include('partials/_footer.ejs'); %>