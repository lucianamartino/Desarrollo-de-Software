<%- include('partials/_header.ejs'); %>

<link rel="stylesheet" href="/css/app.css">
<div class="chat-container">
    <div class="chat-sidebar">
        <h2>Chats</h2>
        <ul id="chat-list">
            <% chats.forEach(chat => { %>
                <li class="chat-user">
                    <a href="/chat/<%= chat.idUsuario %>">
                        <%= chat.nombreUsuario %>
                    </a>
                </li>
            <% }) %>
        </ul>
    </div>
    <div class="chat-main">
        <div class="chat-header">
            <h3><%= receptor.nombreUsuario %></h3>
        </div>
        <div id="messages" class="messages"></div>
        <div class="input-container">
            <input type="text" id="message-input" placeholder="Escribe tu mensaje...">
            <button id="send-button">Enviar</button>
        </div>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const currentUser = {
        userId: '<%= currentUser.id %>',
        name: '<%= currentUser.name %>'
    };
    
    // Establecer el receptor directamente del parámetro de la URL
    const selectedReceptor = '<%= receptor.idUsuario %>';

    document.addEventListener('DOMContentLoaded', () => {
        // Event listener para el botón de enviar
        document.getElementById('send-button').addEventListener('click', () => {
            sendMessage();
        });

        // Event listener para la tecla Enter
        document.getElementById('message-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Autenticar al conectar
        socket.emit('authenticate', { userId: currentUser.userId });
    });

    socket.on('authenticated', () => {
        console.log('Conectado al chat');
        loadMessages();
    });

    // Cargar mensajes solo del chat actual
    async function loadMessages() {
        try {
            const response = await fetch(`/chat/messages?receptorId=${selectedReceptor}`);
            const messages = await response.json();
            clearMessages();
            displayMessages(messages);
        } catch (error) {
            console.error('Error al cargar mensajes:', error);
        }
    }

    function clearMessages() {
        const messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML = '';
    }

    function displayMessages(messages) {
        const messagesDiv = document.getElementById('messages');
        messages.forEach(msg => {
            const messageElement = createMessageElement(msg);
            messagesDiv.appendChild(messageElement);
        });
        scrollToBottom();
    }

    function createMessageElement(msg) {
        const div = document.createElement('div');
        const isSent = msg.Usuario_idUsuario == currentUser.userId;
        div.className = `message ${isSent ? 'sent' : 'received'}`;
        
        const text = document.createElement('p');
        text.textContent = msg.texto;
        
        const info = document.createElement('small');
        const fecha = new Date(msg.fecha);
        info.textContent = `${fecha.toLocaleTimeString()}`;
        
        div.appendChild(text);
        div.appendChild(info);
        return div;
    }

    function scrollToBottom() {
        const messagesDiv = document.getElementById('messages');
        messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    function sendMessage() {
        const input = document.getElementById('message-input');
        const mensaje = input.value.trim();
        
        if (mensaje) {
            console.log('Enviando mensaje:', {
                receptorId: selectedReceptor,
                texto: mensaje,
                emisorNombre: currentUser.name
            });
            
            socket.emit('send_message', {
                receptorId: selectedReceptor,
                texto: mensaje,
                emisorNombre: currentUser.name
            });
            input.value = '';
        }
    }

    // Recibir nuevos mensajes
    socket.on('new_message', (message) => {
        // Solo mostrar mensajes si son parte de esta conversación
        if (message.Usuario_idUsuario == selectedReceptor || 
            message.Receptor_idUsuario == selectedReceptor) {
            const messagesDiv = document.getElementById('messages');
            const messageElement = createMessageElement(message);
            messagesDiv.appendChild(messageElement);
            scrollToBottom();
        }
    });

    // Manejar mensajes enviados
    socket.on('message_sent', (message) => {
        const messagesDiv = document.getElementById('messages');
        const messageElement = createMessageElement(message);
        messagesDiv.appendChild(messageElement);
        scrollToBottom();
    });

    socket.on('error', (error) => {
        console.error('Error:', error);
        alert('Error al enviar mensaje');
    });
</script>

<style>
.chat-container {
    display: flex;
    flex-direction: column;
    height: 80vh;
    margin: 20px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.chat-header {
    padding: 15px;
    background: #f5f5f5;
    border-bottom: 1px solid #ddd;
}

.chat-header h3 {
    margin: 0;
}

.chat-main {
    flex: 1;
    display: flex;
    flex-direction: column;
}

.messages {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.message {
    max-width: 70%;
    padding: 10px;
    border-radius: 10px;
    margin: 5px 0;
}

.message.sent {
    align-self: flex-end;
    background-color: #007bff;
    color: white;
}

.message.received {
    align-self: flex-start;
    background-color: #e9ecef;
}

.input-container {
    display: flex;
    padding: 20px;
    gap: 10px;
    border-top: 1px solid #ddd;
}

.input-container input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.input-container button {
    padding: 10px 20px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.input-container button:hover {
    background: #0056b3;
}
</style>
<style>
    .chat-container {
    display: flex;
    height: 80vh;
    background: #ffffff;
    border: 1px solid #ddd;
    border-radius: 8px;
    overflow: hidden;
}

.chat-sidebar {
    width: 30%;
    background: #f7f7f7;
    border-right: 1px solid #ddd;
    overflow-y: auto;
    padding: 1rem;
}

.chat-sidebar h2 {
    font-size: 1.2em;
    margin-bottom: 1rem;
}

.chat-sidebar ul {
    list-style: none;
    padding: 0;
}

.chat-sidebar .chat-user {
    padding: 0.8rem;
    margin-bottom: 0.5rem;
    border-radius: 4px;
    transition: background 0.3s;
}

.chat-sidebar .chat-user a {
    text-decoration: none;
    color: #333;
    display: block;
}

.chat-sidebar .chat-user:hover {
    background: #eaeaea;
}

.chat-main {
    width: 70%;
    display: flex;
    flex-direction: column;
    background: #ffffff;
}

.chat-header {
    padding: 1rem;
    border-bottom: 1px solid #ddd;
    font-size: 1.2em;
    color: #333;
}

.messages {
    flex: 1;
    padding: 1rem;
    overflow-y: auto;
    background: #f9f9f9;
}

.input-container {
    display: flex;
    border-top: 1px solid #ddd;
    padding: 1rem;
}

#message-input {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
}

#send-button {
    margin-left: 0.5rem;
    padding: 0.5rem 1rem;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 4px;
    cursor: pointer;
}

#send-button:hover {
    background-color: #0056b3;
}

</style>

<%- include('partials/_footer.ejs'); %>